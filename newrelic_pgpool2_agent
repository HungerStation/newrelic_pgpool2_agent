#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'newrelic_plugin'
require 'pg'
require 'sequel'

module NewRelicPgpool2
  VERSION = '1.1.1'

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid 'com.hungerstation.newrelic-pgpool-agent'
    agent_config_options :name, :servers
    agent_version NewRelicPgpool2::VERSION
    agent_human_labels('Pgpool2') { name }

    attr_reader :ident

    def setup_metrics; end

    def poll_cycle
      dbs = {}
      servers.each do |server|
        report_metric "Server/Name/#{server['name']}", 'Name', server['name']
        dbs[server['name']] = Pgpool2.new(host: server['host'], port: server['port'], user: server['user'], pass: server['password'], server_name: server['name'], db: server['db'])
      end
      dbs.each do |name, pgpool2|
        report_metric "Connections/Frontends/#{name}", 'Count', pgpool2.get_active_frontend_connections_count.to_i
        pgpool2.get_active_backend_connections_count_by_nodes.each do |backend_hash|
          report_metric "Connections/Backends/#{name}/#{backend_hash.keys.first}", 'Count', backend_hash.values.first.to_i
        end
      end

      dbs.each do |_, pgpool2|
        pgpool2.close_connection
      end
    end
  end

  class Pgpool2
    attr_reader :name

    def initialize(host:, port:, user:, pass:, server_name:, db:)
      @db = Sequel.connect("postgres://#{user}:#{pass}@#{host}:#{port}/#{db}")
      @name = server_name
    end

    def get_active_frontend_connections_count
      pool_pools.select{|res| res[:pool_connected].to_i == 1}.uniq{|res| res[:pool_pid]}.count
    end

    def get_active_backend_connections_count_by_nodes
      pool_pools.select{|res| res[:pool_backendpid].to_i != 0}.group_by{|res| res[:backend_id]}.map{|k,v| {"#{@name}_node_#{k}" => v.size}}
    end

    def close_connection
      @db.disconnect
    end

    private

    def pool_pools
      @pool_pools ||= @db["show pool_pools"].to_a
    end
  end

  NewRelic::Plugin::Config.config_file = File.dirname(__FILE__) + '/config/newrelic_plugin.yml'
  NewRelic::Plugin::Setup.install_agent :dbs, self
  NewRelic::Plugin::Run.setup_and_run
end
